		Final Project
---------------------------------------
dbScript
-------------------------------------
create table product(
pid int,
pname varchar(20),
pprice float
)

select * from product
--------------------------------------------------------------------------------------------------
1. create project MyFinalProject as Maven project
2. open pom.xml file and add follow dependencies.
--------------------------------------------------------------------------------------------------

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>5.3.14</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.3.14</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
			<version>9.4.0.jre11</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/jstl/jstl -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
		<dependency>
			<groupId>com.microsoft.sqlserver</groupId>
			<artifactId>mssql-jdbc</artifactId>
			<version>9.4.0.jre11</version>
		</dependency>
------------------------------------------------------------------------------------------------------
3. Open web.xml file in src/main/webapp/WEB-INF/web.xml and add DispatcherServlet
-----------------------------------------------------------------------------------
<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
--------------------------------------------------------------------------------------------------------
4. Add a xml file in same folder spring-servlet.xml and specify viewResolver
also specify component-scan for @Component
------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">
    <context:component-scan base-package="com.controller"/>
  	
  	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" name="viewResolver">
  		<property name="prefix" value="/WEB-INF/views/"/>
  		<property name="suffix" value=".jsp" />
  	</bean>
  	
</beans>
----------------------------------------------------------------------------------------------
5. add new folder views in WEB-INF folder.
5.1 add new class Product in com.model
-------------------------------------------------
package com.model;

public class Product {
	private int pid;
	private String pname;
	private float pprice;
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getPname() {
		return pname;
	}
	public void setPname(String pname) {
		this.pname = pname;
	}
	public float getPprice() {
		return pprice;
	}
	public void setPprice(float pprice) {
		this.pprice = pprice;
	}
	public Product(int pid, String pname, float pprice) {
		super();
		this.pid = pid;
		this.pname = pname;
		this.pprice = pprice;
	}
	public Product() {
		super();
		// TODO Auto-generated constructor stub
	}
	

}
------------------------------------------------------------------------------------------------
5.2 create package com.dao
---------------------------
5.3 add interface ProductDao
------------------------------------------------------
package com.dao;

import java.util.List;

import com.model.Product;


public interface ProductDao {
	public int insertProduct(Product product);
	public int updateProduct(Product product);
	public int deleteProduct(Product product);
	//get only single row
	public Product getProduct(int pid);
	//to get all employees
	public List<Product> getAllProduct();

}
---------------------------------------------------------------
5.4 add new class ProductDaoImpl
-------------------------------
package com.dao;

import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;

import com.model.Product;

public class ProductDaoImpl implements ProductDao {

	private JdbcTemplate jdbcTemplate;
	
	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}

	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public int insertProduct(Product product) {
		String query = "insert into product values (?,?,?)";
		int row=this.jdbcTemplate.update(query,product.getPid(),product.getPname(),product.getPprice());
		return row;
	}

	public int updateProduct(Product product) {
		String query = "update product set pname=? where pid=?";
		int row=this.jdbcTemplate.update(query,product.getPname(),product.getPid());
		return row;
	}

	public int deleteProduct(Product product) {
		
		return 0;
	}

	public Product getProduct(int pid) {
		
		return null;
	}

	public List<Product> getAllProduct() {
		String query = "select * from product";
		List<Product> prod =this.jdbcTemplate.query(query, new RowMapperImpl());
		return prod;
	}

}
-----------------------------------------------------------------------------------------------------------------------------
5.4 add new class RowMapperImpl
-------------------------------------
package com.dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;


import com.model.Product;

public class RowMapperImpl implements RowMapper<Product> {

	public Product mapRow(ResultSet rs, int rowNum) throws SQLException {
		
		Product prod = new Product();
		prod.setPid(rs.getInt(1));
		prod.setPname(rs.getString(2));
		prod.setPprice(rs.getFloat(3));
		return prod;
		
	}


}
--------------------------------------------------------------------------------------------------------------------------------
6. Create a package now in src/main as com.controller
7. Add new class in this package HomeController
------------------------------------------------------
package com.controller;

import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.dao.JavaConfigurationClass;
import com.dao.ProductDao;
import com.dao.ProductDaoImpl;
import com.model.Product;


@Controller
public class HomeController {
	static ApplicationContext context = new AnnotationConfigApplicationContext(JavaConfigurationClass.class);
	static ProductDaoImpl pDao=context.getBean("pDao", ProductDaoImpl.class);
	@RequestMapping("/home")
	public String getHomePage() {
		
		return "home";
		
	}
	
	@RequestMapping("/addProduct")
	public String addProduct() {
		return "addProduct";
	}
	
	@RequestMapping("/added")
	public String insertProduct(@RequestParam("pid") int pid,@RequestParam("pname") String pname, @RequestParam("pprice")float pprice) {
		System.out.println(pid);
		System.out.println(pname);
		System.out.println(pprice);
		Product prod = new Product();
		prod.setPid(pid);
		prod.setPname(pname);
		prod.setPprice(pprice);
		pDao.insertProduct(prod);
		return "addMessage";
	}
	
	@RequestMapping("/products")
	public ModelAndView getProducts(ModelAndView mv) {
		List<Product> products =pDao.getAllProduct();
		mv.addObject("products",products);
		mv.setViewName("products");
		return mv;
	}
	
	@RequestMapping("/update")
	public String updateProduct() {
		return "update";
	}
	
	@RequestMapping("/updateSuccess")
	public String updateSuccess(@ModelAttribute Product product) {
		pDao.updateProduct(product);
		return "updateSuc";
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------
home.jsp
------------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Shopping App</title>
<style>
a{text-decoration: none;
background-color: navy;
color: white;
padding: 15px;
margin-left: 160px;
}
a:hover {
	background-color: white;
	border: 1px solid navy;
	color: navy;
}
</style>
</head>
<body>
	<h1 style="text-align: center; color: blue;">Welcome to My Shopping Application</h1>
	<a href="addProduct">Add Product</a>
	<a href="update">Update Product</a>
	<a href="">Delete Product</a>
	<a href="products">Display Product</a>
	
</body>
</html>
----------------------------------------------------------------------------------------------------
addProduct.jsp
----------------------------------------------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Add Product</title>
<style>
#container{
height: 400px;
width: 400px;
border: 1px solid blue;
margin-left: 460px;
text-align: center;
}
form{
margin: 50px;
font-family: cursive;
}

</style>
</head>
<body>
<h1 style="text-align: center; color: blue;">Add Product to Database</h1>
<div id="container">

<form action="added">
Product ID: <input type="text" name="pid" />
<br>
<br/>
<br/>
Product Name: <input type="text" name="pname" />
<br>
<br/>
<br/>
Product Price: <input type="text" name="pprice" />
<br>
<br/>
<br/>
<input style="background-color: blue; padding: 15px; color: white;" type="submit"  value="Add Product"/>

</form>

</div>
</body>
</html>
---------------------------------------------------------------------------------------------------------
addMessage.jsp
------------------------------------------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Product Added</title>
</head>
<body>
<h1 style="text-align: center; color: blue;">Product Added Successfully.</h1>
</body>
</html>
---------------------------------------------------------------------------------------------------
products.jsp
-------------------------------------------------------------
<%@page import="com.model.Product"%>
<%@page import="java.util.List"%>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Products</title>
<style>
#container{
height: 400px;
width: 400px;
border: 1px solid blue;
margin-left: 460px;
text-align: center;
}
</style>
</head>
<body>
<div id="container">
<h1 style="text-align: center; color: blue;">Products Available</h1>
<% List<Product> products = (List<Product>)request.getAttribute("products");%>
<h3><%for(Product prod :products){
	out.println(prod.getPid()+"--"+prod.getPname()+"--"+prod.getPprice()+"<br/>");
	out.println("<hr>");}%></h3>
</div>
</body>
</html>
---------------------------------------------------------------------------------------------------
update.jsp
-------------------------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Add Product</title>
<style>
#container{
height: 400px;
width: 400px;
border: 1px solid blue;
margin-left: 460px;
text-align: center;
}
form{
margin: 50px;
font-family: cursive;
}

</style>
</head>
<body>
<h1 style="text-align: center; color: blue;">Update Product</h1>
<div id="container">

<form action="updateSuccess">
Product ID: <input type="text" name="pid" />
<br>
<br/>
<br/>
Product Name: <input type="text" name="pname" />
<br>
<br/>
<br/>
Product Price: <input type="text" name="pprice" />
<br>
<br/>
<br/>
<input style="background-color: blue; padding: 15px; color: white;" type="submit"  value="Update Product"/>

</form>

</div>
</body>
</html>
-----------------------------------------------------------------------------------------------------------------------
updateSuc.jsp
---------------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Updated</title>
</head>
<body>
<h1>Updated Successfully</h1>
</body>
</html>
------------------------------------------------------------------------------