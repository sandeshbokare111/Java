		Spring JDBC
--------------------------------------------------
1. Create table in PreImpact14
------------------------------
create table emp(
emp_id int not null,
emp_name varchar(20)
)
--------------------------------
2. create new package com.demo3
3. create new class Emp
------------------------
package com.demo3;

public class Emp {
	private int emp_id;
	private String emp_name;
	public Emp() {
	}
	public Emp(int emp_id, String emp_name) {
		super();
		this.emp_id = emp_id;
		this.emp_name = emp_name;
	}
	public int getEmp_id() {
		return emp_id;
	}
	public void setEmp_id(int emp_id) {
		this.emp_id = emp_id;
	}
	public String getEmp_name() {
		return emp_name;
	}
	public void setEmp_name(String emp_name) {
		this.emp_name = emp_name;
	}
	@Override
	public String toString() {
		return "Emp [emp_id=" + emp_id + ", emp_name=" + emp_name + "]";
	}
	

}
-----------------------------------------------------------------------------------
4. add new interface EmployeeDao
----------------------------------
package com.demo3;

import java.util.List;

public interface EmployeeDao {
	public int insert(Emp emp);
	public int updateEmp(Emp emp);
	public int deleteEmp(Emp emp);
	//get single row data or single object
	public Emp getEmp(int emp_id);
	public List<Emp> getAllEmpoyee(); 

}
----------------------------------------------------------
5. add new class EmployeeDaoImpl implements EmployeeDao
---------------------------------------------------------
package com.demo3;

import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

public class EmployeeDaoImpl implements EmployeeDao {

	private JdbcTemplate jdbcTemplate;
	
	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}

	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public int insert(Emp emp) {
		String query="insert into emp values (?,?)";
		int res =this.jdbcTemplate.update(query,emp.getEmp_id(),emp.getEmp_name());
		return res;
	}

	public int updateEmp(Emp emp) {
		String query ="update emp set emp_name=? where emp_id=?";
		int res = this.jdbcTemplate.update(query,emp.getEmp_name(),emp.getEmp_id());
		return res;
	}

	public int deleteEmp(Emp emp) {
		String query ="delete from emp where emp_id=?";
		int res = this.jdbcTemplate.update(query,emp.getEmp_id());
		return res;
	}

	public Emp getEmp(int emp_id) {
		String query="select * from emp where emp_id= ?";
		RowMapper<Emp> rowMapper = new RowMapperImpl();
		Emp emp =this.jdbcTemplate.queryForObject(query, rowMapper,emp_id);
		return emp;
	}

	public List<Emp> getAllEmpoyee() {
		String query="select * from emp";
		List<Emp> emp =this.jdbcTemplate.query(query, new RowMapperImpl());
		return emp;
	}

}
-------------------------------------------------------------------------------------------------------------------
6. add new class RowMapperImpl implements RowMapper<Emp>
---------------------------------------------------------
package com.demo3;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

public class RowMapperImpl implements RowMapper<Emp> {

	public Emp mapRow(ResultSet rs, int rowNum) throws SQLException {
		Emp emp = new Emp();
		emp.setEmp_id(rs.getInt(1));
		emp.setEmp_name(rs.getString(2));
		return emp;
	}

}
------------------------------------------------------------------------------
7. add new bean.xml 
-------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" name="ds">
    	<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"></property>
    	<property name="url" value="jdbc:sqlserver://localhost;databaseName=PreImpact13;instanceName=SQLEXPRESS2019" />
    	<property name="username" value="sa"/>
    	<property name="password" value="password_123"/>
    </bean>
    
	<bean class="org.springframework.jdbc.core.JdbcTemplate" name="jdbctemp">
	<property name="dataSource">
	<ref bean="ds"/>
	</property>
	</bean>
	
	<bean class="com.demo3.EmployeeDaoImpl" name="empDao">
	<property name="jdbcTemplate" ref="jdbctemp"></property>
	</bean>
</beans>
----------------------------------------------------------------------------------------------------------------------
8. Add new class MainClass
----------------------------
package com.demo3;

import java.util.List;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainClass {

	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext("com/demo3/bean.xml");

		EmployeeDao empDao = context.getBean("empDao", EmployeeDao.class);
		// insert
//     Emp emp = new Emp();
//     emp.setEmp_id(1);
//     emp.setEmp_name("John");
//     int result = empDao.insert(emp);
//     System.out.println(result+"Employee Inserted");
		
		
		// update
//     Emp emp1= new Emp();
//     emp1.setEmp_id(4);
//     emp1.setEmp_name("James");
//     int result1=empDao.updateEmp(emp1);
//     System.out.println(result1+"Employee Updated");
		
		
		// delete
//		Emp emp2 = new Emp();
//		emp2.setEmp_id(4);
//		int result3 = empDao.deleteEmp(emp2);
//		System.out.println(result3 + "Emloyee Deleted");
		
		
		//Display one employee
//		Emp emp = empDao.getEmp(1);
//		System.out.println(emp.getEmp_id()+"-"+emp.getEmp_name());
		
		//Display all Employee
//		List<Emp> emp=empDao.getAllEmpoyee();
//		for(Emp e:emp) {
//			System.out.println(e.getEmp_id()+"-"+e.getEmp_name());
//		}
		
	}

}
------------------------------------------------------------------------------------------------------