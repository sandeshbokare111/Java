Application

package com;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}


Pojo class

  package com.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
//import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
//import jakarta.validation.constraints.Size;

@Entity
@Table
public class Cricketer {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	int id; 
	@NotBlank(message="name should not be blank")
	String name;
	@NotNull(message="jersyNo should not be null")
	int jersyNo;
	@Min(value = 1000, message="Domestic Runs should be greater than 5000")
	int domesticRuns;
	@Min(value = 5000, message="international Runs should be greater than 5000")
	int internationalRuns;
	public Cricketer() {
		super();
	}
	public Cricketer(int id, String name, int jersyNo, int domesticRuns, int internationalRuns) {
		super();
		this.id = id;
		this.name = name;
		this.jersyNo = jersyNo;
		this.domesticRuns = domesticRuns;
		this.internationalRuns = internationalRuns;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getJersyNo() {
		return jersyNo;
	}
	public void setJersyNo(int jersyNo) {
		this.jersyNo = jersyNo;
	}
	public int getDomesticRuns() {
		return domesticRuns;
	}
	public void setDomesticRuns(int domesticRuns) {
		this.domesticRuns = domesticRuns;
	}
	public int getInternationalRuns() {
		return internationalRuns;
	}
	public void setInternationalRuns(int internationalRuns) {
		this.internationalRuns = internationalRuns;
	}

}


Repository class

package com.repository;

import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import com.entity.Cricketer;

@Repository
public interface CricRepository extends CrudRepository<Cricketer,Integer>{
	public Cricketer findByJersyNo(int jersyNo);	
	@Query(value="select * from cricketer where domestic_runs>?",nativeQuery=true)
	public List<Cricketer> findByDomesticRuns(int domestic_runs);
	public Cricketer findByNameAndJersyNo(String name,int jersyNo);
	public Cricketer findByName(String name);
	public Cricketer findByJersyNo(String name);
}

Services

package com.services;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.zip.CRC32;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.entity.Cricketer;
import com.repository.CricRepository;

@Service
public class CricSevices {
	@Autowired
	CricRepository cRepo;
	
//	@ExceptionHandler(MethodArgumentNotValidException.class)
//	public Map<String, String> handler(MethodArgumentNotValidException ex) {
//	Map<String, String> errorMap = new HashMap<>();
//	
//	ex.getBindingResult().getFieldErrors().forEach(errors->{
//		errorMap.put(errors.getField(), errors.getDefaultMessage());
//	});
//	return errorMap;
//	}
	
	public Cricketer addCricketer(Cricketer cr) {
		return cRepo.save(cr);
	}

	public List<Cricketer> getAllCricketers() {
		List<Cricketer> list = (List<Cricketer>) cRepo.findAll();
		return list;
	}

	public Optional<Cricketer> getCricById(int id) {
		Optional<Cricketer> cr = cRepo.findById(id);
		return cr;
	}

	public Cricketer updateCricDetails(Cricketer cr, int id) {
		Optional<Cricketer> c1 = cRepo.findById(id);
		Cricketer pojo = new Cricketer();
		pojo = c1.get();
		pojo.setName(cr.getName());
		pojo.setDomesticRuns(cr.getDomesticRuns());
		pojo.setInternationalRuns(cr.getInternationalRuns());
		pojo.setJersyNo(cr.getJersyNo());
		return cRepo.save(pojo);
	}

	public Cricketer deleteCricketer(int id) {
		Cricketer c = cRepo.findById(id).get();
		cRepo.deleteById(id);
		return c;
	}
	
	//By using repository FindBy methods
	
	public List<Cricketer> findByDomesticRuns(int domRuns){
		List<Cricketer> c = cRepo.findByDomesticRuns(domRuns);
		return c;
	}
	
	
	
	public Cricketer findByJersyNum(int jersyNo) {
		Cricketer c = cRepo.findByJersyNo(jersyNo);
		return c;
	}
	
	public Cricketer findByNameAndJersyNo(String name, int jersyNo) {
		Cricketer c = cRepo.findByNameAndJersyNo(name, jersyNo);
		return c;
	}
	
	
	
}

Controller

package com.controller;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.entity.Cricketer;
import com.repository.CricRepository;
import com.services.CricSevices;
import com.validation.ErrorModel;

import jakarta.validation.Valid;
import jakarta.validation.ValidationException;

@RestController
@RequestMapping("/api")
public class CricController {

	@Autowired
	CricSevices csr;
	
	@Autowired
	CricRepository crp;
	
//	@ExceptionHandler(MethodArgumentNotValidException.class)
//	public Map<String, String> handler(MethodArgumentNotValidException ex) {
//	Map<String, String> errorMap = new HashMap<>();
//	
//	ex.getBindingResult().getFieldErrors().forEach(errors->{
//		errorMap.put(errors.getField(), errors.getDefaultMessage());
//	});
//	return errorMap;
//	}
	
	
	
	
	
	
	
	@PostMapping("/cricketer")
	public Cricketer insertCricketer(@RequestBody @Valid Cricketer cr) {
		if(cr.getId()==0 && cr.getName()!= null && cr.getJersyNo()!=0) {
		return crp.save(cr);
	}else {
		throw new ValidationException("Cricketer cant be added");
		}
	}
	
//	@ExceptionHandler(ValidationException.class)
//	ResponseEntity<String> excpetionHandler(ValidationException v){
//		return new ResponseEntity(v.getMessage(),HttpStatus.BAD_REQUEST);
//	}
//	
	
	
	@ExceptionHandler
	@ResponseStatus(code= HttpStatus.BAD_REQUEST)
	ErrorModel exceptionHandler(ValidationException e) {
		return new ErrorModel("400",e.getMessage());
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@GetMapping("/cricketers")
	public ResponseEntity<List<Cricketer>> findAllCricketers(){
		List<Cricketer> s = csr.getAllCricketers();
		return new ResponseEntity<List<Cricketer>>(s,HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/cricketer/{id}")
	public ResponseEntity<Cricketer> getCricketer(@PathVariable ("id") int id) {
		Cricketer s = csr.getCricById(id).get();
		return ResponseEntity.ok().body(s);		
	}
	
	
	
	
	
	
	
	
	@PutMapping("/cricketer/{id}")
	public ResponseEntity<Cricketer> updateCric(@RequestBody Cricketer c1, @PathVariable ("id") int id) {
		Cricketer c = csr.updateCricDetails(c1, id);
		if (crp.findById(c1.getId()).isPresent()) {
			return new ResponseEntity<Cricketer>(c,HttpStatus.OK);
		}else {
			return new ResponseEntity<Cricketer>(c1,HttpStatus.BAD_REQUEST);
		}
		
//		return ResponseEntity.accepted().body(c);
	}
	
	
	
	
	
	
	
	
	
	
	
	@DeleteMapping("/cricketer/{id}")
	public Cricketer deleteCric(@PathVariable("id") int id) {
		return csr.deleteCricketer(id);		
	}
	
	@GetMapping("/cricketers/{domRuns}")
	public List<Cricketer> findByDomRuns(@PathVariable("domRuns") int domRuns){
		return csr.findByDomesticRuns(domRuns);	
	}
	
	@GetMapping("/cricketer/{jersyNo}")
	public Cricketer findByJersyNo(@PathVariable ("jersyNo") int jersyNo) {
		return csr.findByJersyNum(jersyNo);	
	}
	
	@GetMapping("/cricketer/{name}/{jersyNo}")
	public Cricketer findByNameAndJersy(@PathVariable("name") String name,@PathVariable("jersyNo") int jersyNo) {
		return csr.findByNameAndJersyNo(name,jersyNo);
	}
	
//	@GetMapping("/cricketer/{name}/{jersyNo}")
//	public Cricketer findByNameOrJersy(@PathVariable(value="name",required = false) String name,@PathVariable("jersyNo",required = false) int jersyNo) {
//		return csr.findByNameOrJersyNo(name,jersyNo);
//	}
}

